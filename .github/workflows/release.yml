name: Build And Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select the release type: create, update, or test"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - update
          - test

jobs:
  zip-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read package.json
        id: package
        run: |
          package_content=$(cat package.json)
          name=$(echo "$package_content" | jq -r '.name')
          displayName=$(echo "$package_content" | jq -r '.displayName')
          version=$(echo "$package_content" | jq -r '.version')
          echo "name=$name" >> $GITHUB_ENV
          echo "displayName=$displayName" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_ENV

      - name: Check for existing release
        id: check_release
        run: |
          release_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.version }}")
          release_id=$(echo "$release_response" | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "Release exists with ID: $release_id"
            echo "release_id=$release_id" >> $GITHUB_ENV
          else
            echo "Release does not exist."
          fi

      - name: Abort if release exists (for create)
        if: ${{ github.event.inputs.release_type == 'create' && env.release_id != '' }}
        run: |
          echo "::error title=Release Already Exists::A release with version ${{ env.version }} already exists. Cannot create duplicate releases."
          exit 1

      - name: Create ZIP file
        run: |
          zip -r "${{ env.name }}-${{ env.version }}.zip" . \
          -x '.git/*' '.github/*' '*.md' '*.bak'

      - name: Create or update a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.version }}"
          release_name: "${{ env.version }}"
          draft: ${{ github.event.inputs.release_type == 'test' }}
          prerelease: false

      - name: Upload ZIP to release
        if: ${{ github.event.inputs.release_type != 'create' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./${{ env.name }}-${{ env.version }}.zip"
          asset_name: "${{ env.name }}-${{ env.version }}.zip"
          asset_content_type: application/zip

      - name: Upload package.json to release
        if: ${{ github.event.inputs.release_type != 'create' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./package.json"
          asset_name: "package.json"
          asset_content_type: application/json

      - name: Upload UnityPackage to release
        if: ${{ github.event.inputs.release_type != 'create' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./Packages/${{ env.name }}/${{ env.name }}-${{ env.version }}.unitypackage"
          asset_name: "${{ env.name }}-${{ env.version }}.unitypackage"
          asset_content_type: application/octet-stream

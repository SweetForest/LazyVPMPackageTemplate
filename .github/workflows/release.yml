name: Build And Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select the release type: create, update, or test"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - update
          - test

jobs:          
  build-and-save:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read package.json
        id: package
        run: |
          package_content=$(cat package.json)
          name=$(echo "$package_content" | jq -r '.name')
          displayName=$(echo "$package_content" | jq -r '.displayName')
          version=$(echo "$package_content" | jq -r '.version')
          echo "name=$name" >> $GITHUB_ENV
          echo "displayName=$displayName" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_ENV
          
      - name: Set package.json path
        run: |
          package_json_path="./package.json"
          echo "package_json_path=$package_json_path" >> $GITHUB_ENV
          
      - name: Create ZIP file
        run: |
          zip_path="./${{ env.name }}-${{ env.version }}.zip"
          zip -r "$zip_path" . -x '.git/*' '.git_resources/*' '.github/*' '*.md' '*.md.meta' '*.bak'
          echo "zip_path=$zip_path" >> $GITHUB_ENV

      - name: Copy files to Packages/${{ env.name }}
        run: |
          mkdir -p "Packages/${{ env.name }}"
          rsync -av --exclude='.git' --exclude='.github' --exclude='.git_resources' --exclude='*.md' --exclude='*.md.meta' --exclude='${{ env.name }}-${{ env.version }}.zip' . "Packages/${{ env.name }}/"

      - run: find "Packages/${{ env.name }}/" -name \*.meta >> metaList
    
      - name: Create UnityPackage
        uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: "Packages/${{ env.name }}/${{ env.name }}-${{ env.version }}.unitypackage"
          include-files: metaList
          
      - name: Save UnityPackage path
        run: |
          unitypackage_path="Packages/${{ env.name }}/${{ env.name }}-${{ env.version }}.unitypackage"
          echo "unitypackage_path=$unitypackage_path" >> $GITHUB_ENV

      - name: Output file paths
        run: |
          echo "Package.json path: ${{ env.package_json_path }}"
          echo "ZIP file path: ${{ env.zip_path }}"
          echo "UnityPackage path: ${{ env.unitypackage_path }}"
          
      - name: Check if required files exist
        run: |
          if [ ! -f "${{ env.package_json_path }}" ]; then
            echo "::error title=File Not Found::package.json does not exist."
            exit 1
          fi

          if [ ! -f "${{ env.zip_path }}" ]; then
            echo "::error title=File Not Found::ZIP file does not exist."
            exit 1
          fi

          if [ ! -f "${{ env.unitypackage_path }}" ]; then
            echo "::error title=File Not Found::UnityPackage does not exist."
            exit 1
          fi
      - name: Checking files
        run: |
          echo "Ready to upload package.json: ${{ env.package_json_path }}"
          echo "Ready to upload ZIP: ${{ env.zip_path }}"
          echo "Ready to upload UnityPackage: ${{ env.unitypackage_path }}"
      - name: Check for existing release
        id: check_release
        run: |
          release_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.version }}")
          release_id=$(echo "$release_response" | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "Release exists with ID: $release_id"
            echo "release_id=$release_id" >> $GITHUB_ENV
          else
            echo "Release does not exist."
          fi

      - name: Abort if release exists (for create)
        if: ${{ github.event.inputs.release_type == 'create' && env.release_id != '' }}
        run: |
          echo "::error title=Release Already Exists::A release with version ${{ env.version }} already exists. Cannot create duplicate releases."
          exit 1

      - name: Create release and upload files
        if: ${{ github.event.inputs.release_type == 'create' || github.event.inputs.release_type == 'test' }}
        run: |
          is_draft=false
          if [[ "${{ github.event.inputs.release_type }}" == "test" ]]; then
            is_draft=true
          fi

          release_response=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"${{ env.version }}\", \"name\": \"Release ${{ env.version }}\", \"draft\": $is_draft, \"prerelease\": false}" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          release_id=$(echo "$release_response" | jq -r '.id')
          echo "Created release with ID: $release_id"
          echo "release_id=$release_id" >> $GITHUB_ENV

          # Upload files logic here (replace with actual file paths)
          for asset in ${{ env.package_json_path }} ${{ env.zip_path }} ${{ env.unitypackage_path }}; do
            echo "Uploading asset: $asset"
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @$asset \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename $asset)"
          done

      - name: Update release by deleting existing assets
        if: ${{ github.event.inputs.release_type == 'update' }}
        run: |
          if [ -z "${{ env.release_id }}" ]; then
            echo "::error title=No Existing Release::No existing release found to update."
            exit 1
          fi

          # List existing assets and delete them
          assets_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets")
          asset_ids=$(echo "$assets_response" | jq -r '.[].id')

          if [ -z "$asset_ids" ]; then
            echo "::error title=No Assets Found::No assets found in the existing release."
            exit 1
          fi

          for asset_id in $asset_ids; do
            echo "Deleting asset ID: $asset_id"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
          done

          # Upload new files logic here (same as create)
          for asset in ${{ env.package_json_path }} ${{ env.zip_path }} ${{ env.unitypackage_path }}; do
            echo "Uploading asset: $asset"
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @$asset \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=$(basename $asset)"
          done

      - name: Process completed
        run: |
          echo "Process is completed"

